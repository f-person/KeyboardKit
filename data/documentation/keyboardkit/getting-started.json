{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use KeyboardKit in many different ways:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keyboard extensions can use KeyboardKit to create more powerful keyboards."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can use KeyboardKit to check if a keyboard is enabled, has full access etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apps can create custom input controllers and use KeyboardKit for the text field."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"All targets, such as apps, keyboard extensions, widgets etc. can use KeyboardKit to build upon its functionality."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit supports iOS, iPadOS, macOS, tvOS and watchOS, although some functionality is only available on some platforms."}]},{"anchor":"How-to-install-KeyboardKit","level":2,"type":"heading","text":"How to install KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"KeyboardKit can be installed with the Swift Package Manager:"}]},{"type":"codeListing","syntax":null,"code":["https:\/\/github.com\/KeyboardKit\/KeyboardKit.git"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"or with CocoaPods:"}]},{"type":"codeListing","syntax":null,"code":["pod KeyboardKit"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add the library to the main app, the keyboard extension and any other targets that need it."}]},{"anchor":"How-to-setup-KeyboardKit","level":2,"type":"heading","text":"How to setup KeyboardKit"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In your keyboard extension, just "},{"type":"codeVoice","code":"import KeyboardKit"},{"type":"text","text":" then make "},{"type":"codeVoice","code":"KeyboardViewController"},{"type":"text","text":" inherit "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":". This gives your controller access to a lot of additional functionality, such as new lifecycle functions like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":", observable properties like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext"},{"type":"text","text":", keyboard services like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" and much more."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" behavior is to setup a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard"},{"type":"text","text":" with the standard configuration, which means that this is all you need to create a keyboard extension with a standard, English keyboard:"}]},{"type":"codeListing","syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The controller will call "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()"},{"type":"text","text":" whenever the keyboard should be created or updated. You can override this function to use any custom view in your keyboard extension:"}]},{"type":"codeListing","syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {","","    func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup(with: MyKeyboardView())","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use this approach to customize the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard"},{"type":"text","text":", for instance to hide the autocomplete toolbar:"}]},{"type":"codeListing","syntax":"swift","code":["class KeyboardViewController: KeyboardInputViewController {","","    func viewWillSetupKeyboard() {","        super.viewWillSetupKeyboard()","        setup { controller in","            SystemKeyboard(","                controller: controller,","                autocompleteToolbar: .none","            )","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we here use another "},{"type":"codeVoice","code":"setup"},{"type":"text","text":" function that provides you with a weak controller reference to help you avoid memory leaks when you setup a view that depends on the controller."}]},{"anchor":"How-to-use-the-standard-keyboard-configuration","level":2,"type":"heading","text":"How to use the standard keyboard configuration"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" will by default be configured with a bunch of observable properties and services."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The controller will inject all observable properties into the view hierarchy when you setup KeyboardKit with a view, which means that you can use environment objects to observe the state of these properties."}]},{"type":"codeListing","syntax":"swift","code":["struct MyButton: View {","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        Button(\"Print locale!\") {","            print(context.locale.identifier)","        }.disabled(context.keyboardType == .emojis)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All services are configured with standard implementations when KeyboardKit is started. For instance, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" is initialized with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler"},{"type":"text","text":". All services can be replaced with your own custom implementations."}]},{"anchor":"How-to-observe-keyboard-state","level":2,"type":"heading","text":"How to observe keyboard state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":" to access any observable objects that are injected into the view hierarchy, for instance:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    @EnvironmentObject","    private var context: KeyboardContext","","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also inject an observable object into an initializer and setup an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" like this:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    ","    init(context: KeyboardContext) {","       _context = ObservedObject(wrappedValue: context)","    }","    ","    @ObservedObject private var context: KeyboardContext","    ","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Environment objects are convenient, but KeyboardKit itself uses init injection to make dependencies more explicit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a bunch of KeyboardKit-specific objects that can provide you with important information, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardCalloutContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardTextContext"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/AutocompleteContext"},{"type":"text","text":", etc."}]},{"anchor":"How-to-use-keyboard-services","level":2,"type":"heading","text":"How to use keyboard services"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike contexts, services can’t be injected into the view hierarchy and resolved using environment objects. You must instead inject any service you want to use into your types, for instance via the initializer:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    init(actionHandler: KeyboardActionHandler) {","        self.actionHandler = actionHandler","    }","","    private let actionHandler: KeyboardActionHandler","","    var body: some View {","        Button(action: { actionHandler.handle(.release, on: .space) }) {","            Text(\"Custom space bar\")","                .padding()","                .background(Color.green)","                .cornerRadius(10)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the view uses an injected action handler to trigger a “tap on space” action."}]},{"anchor":"How-to-customize-the-standard-configuration","level":2,"type":"heading","text":"How to customize the standard configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can easily customize the standard configuration by replacing the standard services with your own custom implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, say that you have a custom keyboard action handler:"}]},{"type":"codeListing","syntax":"swift","code":["class MyActionHandler: StandardActionHandler {","","    open override func canHandle(_ gesture: KeyboardGesture, on action: KeyboardAction) -> Bool {","        false   \/\/ Wow, what a useless action handler! ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use this action handler instead of the standard one, by setting "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" to that new type:"}]},{"type":"codeListing","syntax":"swift","code":["class MyKeyboardViewController: KeyboardInputViewController {","","    override func viewDidLoad() {","        keyboardActionHandler = MyActionHandler(inputViewController: self)","        super.viewDidLoad()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should customize your services in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()"},{"type":"text","text":" before any services have been resolved. This way, any inter-dependencies between the services will be properly resolved."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to configure KeyboardKit at a later state, make sure that the service that you replace isn’t used in another service. If so, you must re-create that service as well, to avoid having the old service instance still hanging around."}]},{"anchor":"Going-further","level":2,"type":"heading","text":"Going further"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you followed the example above, you should now have a basic understanding of how to setup KeyboardKit with a custom view, as well as how to use the various keyboard services and observable state and how to customize the standard configuration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information and examples, take a look at the demo apps, which replace many services with demo-specific implementations."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/keyboardkit\/getting-started"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Getting-Started","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This article discusses how get started with KeyboardKit."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Getting Started","role":"article","modules":[{"name":"KeyboardKit"}]},"hierarchy":{"paths":[["doc:\/\/KeyboardKit\/documentation\/KeyboardKit"]]},"references":{"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardContext":{"role":"symbol","title":"keyboardContext","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardContext"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardContext","preciseIdentifier":"s:11KeyboardKit0A7ContextC"}],"abstract":[{"type":"text","text":"The default, observable keyboard context."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardContext","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController":{"role":"symbol","title":"KeyboardInputViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardInputViewController"}],"abstract":[{"type":"text","text":"This class extends "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":" with KeyboardKit"},{"type":"text","text":" "},{"type":"text","text":"specific functionality."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardInputViewController"}],"url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller"},"doc://KeyboardKit/documentation/KeyboardKit/AutocompleteContext":{"role":"symbol","title":"AutocompleteContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutocompleteContext"}],"abstract":[{"type":"text","text":"This is an observab le class that can be used to store a set"},{"type":"text","text":" "},{"type":"text","text":"of autocomplete suggestions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/AutocompleteContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AutocompleteContext"}],"url":"\/documentation\/keyboardkit\/autocompletecontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewWillSetupKeyboard()":{"role":"symbol","title":"viewWillSetupKeyboard()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewWillSetupKeyboard"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This function is called whenever the keyboard view must"},{"type":"text","text":" "},{"type":"text","text":"be created or updated."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewWillSetupKeyboard()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewwillsetupkeyboard()"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardContext":{"role":"symbol","title":"KeyboardContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardContext"}],"abstract":[{"type":"text","text":"This class provides keyboard extensions with contextual and"},{"type":"text","text":" "},{"type":"text","text":"observable information about the keyboard extension itself."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardContext"}],"url":"\/documentation\/keyboardkit\/keyboardcontext"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardCalloutContext":{"role":"symbol","title":"KeyboardCalloutContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardCalloutContext"}],"abstract":[{"type":"text","text":"This observable context can be used to handle callout state"},{"type":"text","text":" "},{"type":"text","text":"for a keyboard."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardCalloutContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardCalloutContext"}],"url":"\/documentation\/keyboardkit\/keyboardcalloutcontext"},"doc://KeyboardKit/documentation/KeyboardKit/SystemKeyboard":{"role":"symbol","title":"SystemKeyboard","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SystemKeyboard"}],"abstract":[{"type":"text","text":"This keyboard can be used to create alphabetic, numeric and"},{"type":"text","text":" "},{"type":"text","text":"symbolic keyboards that mimic the native iOS keyboard."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/SystemKeyboard","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SystemKeyboard"}],"url":"\/documentation\/keyboardkit\/systemkeyboard"},"doc://KeyboardKit/documentation/KeyboardKit":{"role":"collection","title":"KeyboardKit","abstract":[{"type":"text","text":"KeyboardKit helps you build custom keyboards with Swift and SwiftUI."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardActionHandler":{"role":"symbol","title":"keyboardActionHandler","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardActionHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardActionHandler","preciseIdentifier":"s:11KeyboardKit0A13ActionHandlerP"}],"abstract":[{"type":"text","text":"The action handler that will be used by the keyboard to"},{"type":"text","text":" "},{"type":"text","text":"handle keyboard actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewDidLoad()":{"role":"symbol","title":"viewDidLoad()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewDidLoad"},{"kind":"text","text":"()"}],"abstract":[],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewdidload()"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardTextContext":{"role":"symbol","title":"KeyboardTextContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardTextContext"}],"abstract":[{"type":"text","text":"This class provides keyboard extensions with contextual and"},{"type":"text","text":" "},{"type":"text","text":"observable information about the text in the document proxy."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardTextContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardTextContext"}],"url":"\/documentation\/keyboardkit\/keyboardtextcontext"},"doc://KeyboardKit/documentation/KeyboardKit/StandardKeyboardActionHandler":{"role":"symbol","title":"StandardKeyboardActionHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"abstract":[{"type":"text","text":"This standard keyboard action handler is used by default by"},{"type":"text","text":" "},{"type":"text","text":"KeyboardKit and provides a standard way of handling actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"url":"\/documentation\/keyboardkit\/standardkeyboardactionhandler"}}}